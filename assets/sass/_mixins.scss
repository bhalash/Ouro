/*
 * Section Interior Padding
 * ------------------------
 * Responsive padding for sections without having to list it all by hand. 
 * $padding, $padding * 0.8, $padding * 0.6, etc...
 */

@mixin content_padding($padding, $media_arr) {
    $padding-mod: 1; 

    padding-left: $padding;
    padding-right: $padding;

    @each $break in $media_arr {
        @include media(max, $break) {
            padding-left: $padding * $padding-mod;
            padding-right: $padding * $padding-mod;
        }

        $padding-mod: $padding-mod - 0.2;
    }

    @include media(smartphone) {
        padding-left: 0;
        padding-right: 0;
    }
}

/*
 * Vendor Property and Value Prefixes
 * ----------------------------------
 * Automatically vendor prefixes to CSS properties and values.
 */

@mixin prefix($property, $value) {
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -webkit-#{$property}: $value;
    #{$property}: $value;
}

@mixin prefix_value($property, $value) {
    #{$property}: -moz-#{$value};
    #{$property}: -ms-#{$value};
    #{$property}: -webkit-#{$value};
    #{$property}: $value;
}

@mixin webkit($property, $value) {
    /* Flexbox rules need to be prefixed with -webkit for Safari Mobile. Using
     * the general prefix mixin for flexbox cluttered up the compiled CSS with 
     * useless rules. */
    -webkit-#{$property}: $value;
    #{$property}: $value;
}

@mixin webkit_value($property, $value) {
    #{$property}: -webkit-#{$value};
    #{$property}: $value;
}

/*
 * Miscellaneous Mixins
 * --------------------
 */

@mixin flex_size($width, $ratio) {
    // Ratio should be between 0 and foo.
    height: 0;
    padding-bottom: $width * $ratio;
    width: $width;
}

@mixin cover($image) {
    background: center center/cover no-repeat url($image);
}

@mixin vertical_center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

@function rgba_opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    // I do not intend for this to be called directly. 
    // This function inverts RGB colours.
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

@mixin columns($count, $gap) {
    @include prefix(column-count, $count);
    @include prefix(column-gap, $gap);
}

/*
 * Placeholder Styles
 * ------------------
 */

@mixin placeholder_style() {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}