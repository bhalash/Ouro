/**
 * Ouro Site  Mixins
 * -----------------
 * @category   Sass Mixins Stylesheet
 * @package    Ouro_botics landing page
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  2015 Mark Grealish
 * @license    https://www.gnu.org/copyleft/gpl.html The GNU General Public License v3.0
 * @version    1.0
 * @link       https://github.com/bhalash/ouro.ie
 * 
 * This file is part of ouro.ie
 * 
 * ouro.ie is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ouro.ie is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Ouro_botics. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Section Interior Padding
 * ------------------------
 * Responsive padding for sections without having to list it all by hand. 
 * $padding, $padding * 0.8, $padding * 0.6, etc...
 */

@mixin content-padding($padding, $media_arr) {
    $padding-mod: 1; 

    padding-left: $padding;
    padding-right: $padding;

    @each $break in $media_arr {
        @include media(max, $break) {
            padding-left: $padding * $padding-mod;
            padding-right: $padding * $padding-mod;
        }

        $padding-mod: $padding-mod - 0.2;
    }

    @include media(smartphone) {
        padding-left: 0;
        padding-right: 0;
    }
}

/**
 * Social Images and Colours
 * -------------------------
 */

@mixin generate-social-links($element, $size, $sprites, $service: null) {
    /**
     * Generate social Links
     * ---------------------
     * I wanted to reduce the work (and load time) of ubiqui-cancerous social 
     * icons. So:
     * 
     * 1. This uses a SVG spritesheet and is tuned to interact with it.
     * 1a. If you ever alter the spritesheet then you will also need to alter
     *     the given background-posiiton rules in the array.
     * 2. This will generate square icons of arbitrary size. These aren't 
     *    responsive, because that requires a great deal of of CSS or JS. It
     *    just isn't possible to use truly dynamic sizes with a stylesheet in
     *    CSS without using JS to resize everything.
     * 3. Social media icons are /usually/ small and fixed in size, so #3 isn't
     *    a big problem for me. 
     * 4. Pick a size of at least 35 pixels and then externally decide what 
     *    content should display at different sizes.
     */

    $columns: 6;
    $rows: 3;

    $social-styles: (
        beard: (#343537, 0, 0),
        discuss: (#b9dfbc, 20%, 0),
        email: (#f5756c, 40%, 0),
        facebook: (#3B5998, 60%, 0),
        flickr: (#ff0084, 80%, 0),
        github: (#666666, 100%, 0),
        google: (#dd4b39, 0, 50%),
        instagram: (#3f729b, 20%, 50%),
        linkedin: (#0976b4, 40%, 50%),
        pinterest: (#cc2127, 60%, 50%),
        print: (#007aaf, 80%, 50%),
        reddit: (#ff5700, 100%, 50%),
        rss: (#ff6600, 0, 100%),
        search: (#000, 20%, 100%),
        share: (#000, 40%, 100%),
        tumblr: (#35465c, 60%, 100%),
        twitter: (#55acee, 80%, 100%),
        youtube: (#b31217, 100%, 100%) 
    );

    /** Can be a class, ID, element-whatever. #foo, .a or baz, or a[href^=fizz]
     * are all perfectly acceptable. */
    #{$element} {
        background-image: url($sprites);
        background-size: #{$size * $columns} #{$size * $rows};
        background-repeat: no-repeat;
        display: block;
        height: 0;
        padding-bottom: $size;
        width: $size;
    }

    @if ($service) {
        // If you supply a service, just output link for that.
        #{$element}.#{$service} {
            background-color: nth(map-get($social-styles, $service), 1);
            background-position: nth(map-get($social-styles, $service), 2) nth(map-get($social-styles, $service), 3);
        }
    } @else {
        // Else iterate map-list to produce social links.
        @each $map, $item in $social-styles {
            #{$element}.#{$map} {
                background-color: nth($item, 1);
                background-position: nth($item, 2) nth($item, 3);
            }
        }
    }
}

/**
 * Vendor Property and Value Prefixes
 * ----------------------------------
 * Automatically vendor prefixes to CSS properties and values.
 * For the most part I only need to prefix for webkit, so that is the default
 * set.
 */

@mixin prefix($property, $value, $prefixes: webkit) {
    @if ($prefixes) {
        @each $prefix in $prefixes {
            #{'-' + $prefix + '-' + $property}: #{$value};
        }
    }

    #{$property}: $value;
}

@mixin prefix-value($property, $value, $prefixes: webkit) {
    @if ($prefixes) {
        @each $prefix in $prefixes {
            #{$property}: #{'-' + $prefix + '-' + $value};
        }
    }

    #{$property}: #{$value};
}

/**
 * Miscellaneous Mixins
 * --------------------
 */

@mixin flex-size($width, $ratio) {
    // Ratio should be between 0 and foo.
    height: 0;
    padding-bottom: $width * $ratio;
    width: $width;
}

@mixin cover($image) {
    background: center center/cover no-repeat url($image);
}

@mixin vertical-center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

@function rgba-opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    // I do not intend for this to be called directly. 
    // This function inverts RGB colours.
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

@mixin columns($count, $gap) {
    @include prefix(column-count, $count);
    @include prefix(column-gap, $gap);
}

/**
 * Placeholder Styles
 * ------------------
 */

@mixin placeholder-style() {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}