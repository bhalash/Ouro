@mixin breakpoint($point, $size: '') {
    $cell_min: 200px;
    $cell_max: 736px;

    $tablet_min: 736px;
    $tablet_max: 1024px;

    @if $point == smartphone {
        @media only screen and (min-device-width: $cell_min) and (max-device-width: $cell_max) and (orientation: portrait), 
        only screen and (min-device-width: $cell_min) and (max-device-width: $cell_max) and (orientation: landscape) {
            @content;  
        }
    }

    @if $point == tablet {
        @media only screen and (min-device-width: $tablet_min) and (max-device-width: $tablet_max) and (orientation: portrait), 
        only screen and (min-device-width: $tablet_min) and (max-device-width: $tablet_max) and (orientation: landscape) {
            @content;
        }
    }

    @if $point == portrait {
        @media only screen and (orientation: portrait) {
            @content;
        }
    }

    @if $point == landscape {
        @media only screen and (orientation: landscape) {
            @content;
        }
    }

    @if $point == max {
        @media only screen and (max-width: $size + px) {
            @content;
        }
    }

    @if $point == min {
        @media only screen and (min-width: $size + px) {
            @content;
        }
    }
}

@mixin translate($x, $y) {
    -moz-transform: translate($x, $y);
    -ms-transform: translate($x, $y);
    -webkit-transform: translate($x, $y);
    transform: translate($x, $y);
}

@mixin flex_size($width, $ratio) {
    // Ratio should be between 0 and foo.
    height: 0;
    padding-bottom: $width * $ratio;
    width: $width;
}

@mixin vertical_center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

@mixin box_shadow($shadow) {
    -moz-box-shadow: $shadow;
    -ms-box-shadow: $shadow;
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;
}

@function rgba_opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    // I do not intend for this to be called directly. 
    // This function inverts RGB colours.
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

@mixin columns($count, $gap) {
    // Mozilla Firefox
    -moz-column-count: $count;
    -moz-column-gap: $gap;
    // Internet Explorer
    -ms-column-count: $count;
    -ms-column-gap: $gap;
    // Webkit Browsers
    -webkit-column-count: $count;
    -webkit-column-gap : $gap;
    // CSS 3
    column-count: $count;
    column-gap: $gap;
}

@mixin placeholder_style() {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin light_mask($opacity) {
    background-color: rgba(255,255,255,$opacity);
}

@mixin dark_mask($opacity) {
    background-color: rgba(24,41,77,$opacity);
}
